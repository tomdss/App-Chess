package com.example.appchess

class ChessModel {

    var piecesBox = mutableSetOf<ChessPiece>()

    init {
        reset()
    }

    private fun reset() {
        piecesBox.removeAll(piecesBox)

        piecesBox.add(ChessPiece(7, 0, ChessPlayer.WHITE, ChessRank.ROOK))

        piecesBox.add(ChessPiece(7, 7, ChessPlayer.BLACK, ChessRank.ROOK))
        for (i in 0..1) {
            piecesBox.add(ChessPiece(0 + 7 * i, 0, ChessPlayer.WHITE, ChessRank.ROOK))
            piecesBox.add(ChessPiece(0 + 7 * i, 7, ChessPlayer.BLACK, ChessRank.ROOK))
        }
        for (i in 0..1) {
            piecesBox.add(ChessPiece(1 + 5 * i, 0, ChessPlayer.WHITE, ChessRank.KNIGHT))
            piecesBox.add(ChessPiece(1 + 5 * i, 7, ChessPlayer.BLACK, ChessRank.KNIGHT))
        }
        for (i in 0..1) {
            piecesBox.add(ChessPiece(2 + 3 * i, 0, ChessPlayer.WHITE, ChessRank.BISHOP))
            piecesBox.add(ChessPiece(2 + 3 * i, 7, ChessPlayer.BLACK, ChessRank.BISHOP))
        }
        for (i in 0..7) {
            piecesBox.add(ChessPiece(i, 1, ChessPlayer.WHITE, ChessRank.PAWN))
            piecesBox.add(ChessPiece(i, 6, ChessPlayer.BLACK, ChessRank.PAWN))
        }
    }

    private fun pieceAt(col: Int, row: Int): ChessPiece? {
        for (piece in piecesBox) {
            if (piece.col == col && piece.row == row) {
                return piece
            }
        }
        return null
    }

    override fun toString(): String {
        var desc = ""
        for (row in 7 downTo 0) {
            desc += "$row"
            for (col in 0..7) {
                val piece = pieceAt(col, row)
                if (piece == null) {
                    desc += " ."
                } else {
                    desc += " "
                    val isWhite = piece.player == ChessPlayer.WHITE
                    desc += when (piece.rank) {
                        ChessRank.ROOK -> {
                            if (isWhite) "r" else "R"
                        }

                        ChessRank.KNIGHT -> {
                            if (isWhite) "n" else "N"
                        }

                        ChessRank.BISHOP -> {
                            if (isWhite) "b" else "B"
                        }

                        ChessRank.QUEEN -> {
                            if (isWhite) "q" else "Q"
                        }

                        ChessRank.KING -> {
                            if (isWhite) "k" else "K"
                        }

                        ChessRank.PAWN -> {
                            if (isWhite) "p" else "P"
                        }
                    }
                }

            }
            desc += "\n"
        }
        desc += "  0 1 2 3 4 5 6 7\n"
        return desc
    }
}